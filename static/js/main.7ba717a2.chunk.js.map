{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","console","log","assertThisInitialized","state","_this2","fetch","then","response","json","users","_this$state","filterdMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAGaA,eAAO,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BAAoEC,IAAI,YAChFR,EAAAC,EAAAC,cAAA,cAAOH,EAAMO,QAAQG,SCFhBC,EAAW,SAACX,GAAD,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPJ,EAAMY,SAASC,IAAI,SAAAN,GAAO,OACtBN,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,QCJnCS,SAAY,SAAAC,KAAGC,YAAH,IAAgBC,EAAhBF,EAAgBE,aAAhB,OACrBlB,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVgB,KAAK,SACLF,YAAY,iBACZG,SAAUF,MCkDHG,qBAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAyBFP,aAAe,SAACW,GACdP,EAAKQ,SAAS,CAACC,YAAcF,EAAEG,OAAOC,QACtCC,QAAQC,IAARZ,OAAAa,EAAA,EAAAb,CAAAD,KAzBAA,EAAKe,MAAQ,CACX1B,SAAU,GACVoB,YAAa,IALHT,mFAWM,IAAAgB,EAAAb,KAClBc,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKR,SAAS,CAACnB,SAAUgC,uCAkBjC,IAAAC,EACyBnB,KAAKY,MAA9B1B,EADAiC,EACAjC,SAAUoB,EADVa,EACUb,YACXc,EAAkBlC,EAASmC,OAAO,SAAAxC,GAAO,OAC7CA,EAAQG,KAAKsC,cAAcC,SAASjB,EAAYgB,iBAElD,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,mBAEAH,EAAAC,EAAAC,cAAC+C,EAAD,CACEhC,YAAY,iBACZC,aAAcO,KAAKP,eAErBlB,EAAAC,EAAAC,cAACgD,EAAD,CAAUvC,SAAUkC,IAPtB,YAvCYM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.7ba717a2.chunk.js","sourcesContent":["import React from 'react';\nimport  './card.style.css'\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2?size=180x180`} alt=\"monster\"/>\n        <h1> { props.monster.name}</h1>\n    </div>\n)","import React from 'react';\nimport './card-list.style.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))\n        }\n    </div>\n)","import React from 'react';\n\nimport './search-box.style.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder='search monster' \n        onChange={handleChange} \n    />\n)","import React, {Component} from 'react';\n//import logo from './logo.svg';\n\nimport {CardList} from  './component/card-list/card-list.component'\nimport {SearchBox} from './component/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    //this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n\n    \n  }\n  /*\n  handleChange(e){\n    console.log(this); //undefined\n    console.log(1)\n    //this.setState({searchField : e.target.value});\n    \n  }\n  */\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value});\n    console.log(this);\n  }\n  \n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filterdMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1 className='appName'>Monster Rolodex</h1>\n        \n        <SearchBox \n          placeholder='search monster'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filterdMonsters} />>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}